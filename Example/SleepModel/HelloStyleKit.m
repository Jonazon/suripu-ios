//
//  HelloStyleKit.m
//  Sleep Sense
//
//  Created by Delisa Mason on 7/24/14.
//  Copyright (c) 2014 Hello. All rights reserved.
//
//  Generated by PaintCode (www.paintcodeapp.com)
//

#import "HelloStyleKit.h"


@implementation HelloStyleKit

#pragma mark Cache

static UIColor* _darkBlueColor = nil;
static UIColor* _mediumBlueColor = nil;
static UIColor* _currentConditionsBackgroundColor = nil;
static UIColor* _highSleepScoreColor = nil;
static UIColor* _poorSleepScoreColor = nil;
static UIColor* _averageSleepScoreColor = nil;

static PCGradient* _blueBackgroundGradient = nil;

#pragma mark Initialization

+ (void)initialize
{
    // Colors Initialization
    _darkBlueColor = [UIColor colorWithRed: 0.17 green: 0.19 blue: 0.23 alpha: 1];
    _mediumBlueColor = [UIColor colorWithRed: 0.184 green: 0.514 blue: 0.639 alpha: 1];
    _currentConditionsBackgroundColor = [UIColor colorWithRed: 0.902 green: 0.91 blue: 0.906 alpha: 1];
    _highSleepScoreColor = [UIColor colorWithRed: 0.368 green: 0.8 blue: 0.32 alpha: 1];
    _poorSleepScoreColor = [UIColor colorWithRed: 0.8 green: 0.339 blue: 0.32 alpha: 1];
    _averageSleepScoreColor = [UIColor colorWithRed: 0.947 green: 0.901 blue: 0.5 alpha: 1];

    // Gradients Initialization
    CGFloat blueBackgroundGradientLocations[] = {0, 1};
    _blueBackgroundGradient = [PCGradient gradientWithColors: @[HelloStyleKit.darkBlueColor, HelloStyleKit.mediumBlueColor] locations: blueBackgroundGradientLocations];

}

#pragma mark Colors

+ (UIColor*)darkBlueColor { return _darkBlueColor; }
+ (UIColor*)mediumBlueColor { return _mediumBlueColor; }
+ (UIColor*)currentConditionsBackgroundColor { return _currentConditionsBackgroundColor; }
+ (UIColor*)highSleepScoreColor { return _highSleepScoreColor; }
+ (UIColor*)poorSleepScoreColor { return _poorSleepScoreColor; }
+ (UIColor*)averageSleepScoreColor { return _averageSleepScoreColor; }

#pragma mark Gradients

+ (PCGradient*)blueBackgroundGradient { return _blueBackgroundGradient; }

#pragma mark Drawing Methods

+ (void)drawSleepScoreGraphWithSleepScoreLabelText: (NSString*)sleepScoreLabelText sleepScore: (CGFloat)sleepScore;
{
    //// General Declarations
    CGContextRef context = UIGraphicsGetCurrentContext();

    //// Color Declarations
    UIColor* color = [UIColor colorWithRed: 0.866 green: 0.866 blue: 0.866 alpha: 1];

    //// Variable Declarations
    UIColor* sleepScoreColor = sleepScore < 45 ? HelloStyleKit.poorSleepScoreColor : (sleepScore < 80 ? HelloStyleKit.averageSleepScoreColor : HelloStyleKit.highSleepScoreColor);
    CGFloat graphPercentageAngle = sleepScore > 0 ? (sleepScore < 100 ? 360 - sleepScore * 0.01 * 360 : 1) : 0;
    NSString* sleepScoreText = sleepScore > 0 ? (sleepScore <= 100 ? [NSString stringWithFormat: @"%ld", (NSInteger)round(sleepScore)] : @"100") : @"0";

    //// gray oval Drawing
    CGContextSaveGState(context);
    CGContextTranslateCTM(context, 60.5, 61);
    CGContextRotateCTM(context, -90 * M_PI / 180);

    UIBezierPath* grayOvalPath = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(-52, -51.5, 104, 103)];
    [color setFill];
    [grayOvalPath fill];

    CGContextRestoreGState(context);


    //// pie oval Drawing
    CGContextSaveGState(context);
    CGContextTranslateCTM(context, 60.5, 61);
    CGContextRotateCTM(context, -90 * M_PI / 180);

    CGRect pieOvalRect = CGRectMake(-52, -51.5, 104, 103);
    UIBezierPath* pieOvalPath = UIBezierPath.bezierPath;
    [pieOvalPath addArcWithCenter: CGPointMake(0, 0) radius: CGRectGetWidth(pieOvalRect) / 2 startAngle: 0 * M_PI/180 endAngle: -graphPercentageAngle * M_PI/180 clockwise: YES];
    [pieOvalPath addLineToPoint: CGPointMake(0, 0)];
    [pieOvalPath closePath];

    CGAffineTransform pieOvalTransform = CGAffineTransformMakeTranslation(CGRectGetMidX(pieOvalRect), CGRectGetMidY(pieOvalRect));
    pieOvalTransform = CGAffineTransformScale(pieOvalTransform, 1, CGRectGetHeight(pieOvalRect) / CGRectGetWidth(pieOvalRect));
    [pieOvalPath applyTransform: pieOvalTransform];

    [sleepScoreColor setFill];
    [pieOvalPath fill];

    CGContextRestoreGState(context);


    //// white center oval Drawing
    UIBezierPath* whiteCenterOvalPath = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(11.5, 12, 98, 98)];
    [UIColor.whiteColor setFill];
    [whiteCenterOvalPath fill];


    //// sleep score label Drawing
    CGRect sleepScoreLabelRect = CGRectMake(20, 16, 80, 80);
    NSMutableParagraphStyle* sleepScoreLabelStyle = NSMutableParagraphStyle.defaultParagraphStyle.mutableCopy;
    sleepScoreLabelStyle.alignment = NSTextAlignmentCenter;

    NSDictionary* sleepScoreLabelFontAttributes = @{NSFontAttributeName: [UIFont fontWithName: @"HelveticaNeue-Light" size: 46], NSForegroundColorAttributeName: UIColor.blackColor, NSParagraphStyleAttributeName: sleepScoreLabelStyle};

    [sleepScoreText drawInRect: CGRectOffset(sleepScoreLabelRect, 0, (CGRectGetHeight(sleepScoreLabelRect) - [sleepScoreText boundingRectWithSize: sleepScoreLabelRect.size options: NSStringDrawingUsesLineFragmentOrigin attributes: sleepScoreLabelFontAttributes context: nil].size.height) / 2) withAttributes: sleepScoreLabelFontAttributes];


    //// sleep score text label Drawing
    CGRect sleepScoreTextLabelRect = CGRectMake(28, 77, 64, 14);
    NSMutableParagraphStyle* sleepScoreTextLabelStyle = NSMutableParagraphStyle.defaultParagraphStyle.mutableCopy;
    sleepScoreTextLabelStyle.alignment = NSTextAlignmentCenter;

    NSDictionary* sleepScoreTextLabelFontAttributes = @{NSFontAttributeName: [UIFont fontWithName: @"HelveticaNeue-Light" size: 9.5], NSForegroundColorAttributeName: UIColor.grayColor, NSParagraphStyleAttributeName: sleepScoreTextLabelStyle};

    [sleepScoreLabelText drawInRect: CGRectOffset(sleepScoreTextLabelRect, 0, (CGRectGetHeight(sleepScoreTextLabelRect) - [sleepScoreLabelText boundingRectWithSize: sleepScoreTextLabelRect.size options: NSStringDrawingUsesLineFragmentOrigin attributes: sleepScoreTextLabelFontAttributes context: nil].size.height) / 2) withAttributes: sleepScoreTextLabelFontAttributes];
}

+ (void)drawMiniSleepScoreGraphWithSleepScore: (CGFloat)sleepScore;
{
    //// General Declarations
    CGContextRef context = UIGraphicsGetCurrentContext();

    //// Color Declarations
    UIColor* color = [UIColor colorWithRed: 0.866 green: 0.866 blue: 0.866 alpha: 1];

    //// Variable Declarations
    UIColor* sleepScoreColor = sleepScore < 45 ? HelloStyleKit.poorSleepScoreColor : (sleepScore < 80 ? HelloStyleKit.averageSleepScoreColor : HelloStyleKit.highSleepScoreColor);
    CGFloat graphPercentageAngle = sleepScore > 0 ? (sleepScore < 100 ? 360 - sleepScore * 0.01 * 360 : 1) : 0;
    NSString* sleepScoreText = sleepScore > 0 ? (sleepScore <= 100 ? [NSString stringWithFormat: @"%ld", (NSInteger)round(sleepScore)] : @"100") : @"0";

    //// gray oval Drawing
    CGContextSaveGState(context);
    CGContextTranslateCTM(context, 15, 15);
    CGContextRotateCTM(context, -90 * M_PI / 180);

    UIBezierPath* grayOvalPath = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(-15, -15, 30, 30)];
    [color setFill];
    [grayOvalPath fill];

    CGContextRestoreGState(context);


    //// pie oval Drawing
    CGContextSaveGState(context);
    CGContextTranslateCTM(context, 15, 15);
    CGContextRotateCTM(context, -90 * M_PI / 180);

    CGRect pieOvalRect = CGRectMake(-15, -15, 30, 30);
    UIBezierPath* pieOvalPath = UIBezierPath.bezierPath;
    [pieOvalPath addArcWithCenter: CGPointMake(CGRectGetMidX(pieOvalRect), CGRectGetMidY(pieOvalRect)) radius: CGRectGetWidth(pieOvalRect) / 2 startAngle: 0 * M_PI/180 endAngle: -graphPercentageAngle * M_PI/180 clockwise: YES];
    [pieOvalPath addLineToPoint: CGPointMake(CGRectGetMidX(pieOvalRect), CGRectGetMidY(pieOvalRect))];
    [pieOvalPath closePath];

    [sleepScoreColor setFill];
    [pieOvalPath fill];

    CGContextRestoreGState(context);


    //// white center oval Drawing
    UIBezierPath* whiteCenterOvalPath = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(2, 2, 26, 26)];
    [UIColor.whiteColor setFill];
    [whiteCenterOvalPath fill];


    //// Text Drawing
    CGRect textRect = CGRectMake(7, 7, 17, 15);
    NSMutableParagraphStyle* textStyle = NSMutableParagraphStyle.defaultParagraphStyle.mutableCopy;
    textStyle.alignment = NSTextAlignmentCenter;

    NSDictionary* textFontAttributes = @{NSFontAttributeName: [UIFont fontWithName: @"HelveticaNeue-Light" size: UIFont.smallSystemFontSize], NSForegroundColorAttributeName: UIColor.blackColor, NSParagraphStyleAttributeName: textStyle};

    [sleepScoreText drawInRect: textRect withAttributes: textFontAttributes];
}

@end



@interface PCGradient ()
{
    CGGradientRef _CGGradient;
}
@end

@implementation PCGradient

- (instancetype)initWithColors: (NSArray*)colors locations: (const CGFloat*)locations
{
    self = super.init;
    if (self)
    {
        CGColorSpaceRef colorSpace = CGColorSpaceCreateDeviceRGB();
        NSMutableArray* cgColors = NSMutableArray.array;
        for (UIColor* color in colors)
            [cgColors addObject: (id)color.CGColor];

        _CGGradient = CGGradientCreateWithColors(colorSpace, (__bridge CFArrayRef)cgColors, locations);
        CGColorSpaceRelease(colorSpace);
    }
    return self;
}

+ (instancetype)gradientWithColors: (NSArray*)colors locations: (const CGFloat*)locations
{
    return [self.alloc initWithColors: colors locations: locations];
}

+ (instancetype)gradientWithStartingColor: (UIColor*)startingColor endingColor: (UIColor*)endingColor
{
    CGFloat locations[] = {0, 1};
    return [self.alloc initWithColors: @[startingColor, endingColor] locations: locations];
}

- (void)dealloc
{
    CGGradientRelease(_CGGradient);
}

@end
